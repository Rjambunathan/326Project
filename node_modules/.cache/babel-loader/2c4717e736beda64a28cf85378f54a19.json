{"remainingRequest":"/Users/andrewsmith/Computer Science/School/CompSci326/326Project/node_modules/babel-loader/lib/index.js!/Users/andrewsmith/Computer Science/School/CompSci326/326Project/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/andrewsmith/Computer Science/School/CompSci326/326Project/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/andrewsmith/Computer Science/School/CompSci326/326Project/src/components/Enrollment.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/andrewsmith/Computer Science/School/CompSci326/326Project/src/components/Enrollment.vue","mtime":1575498612207},{"path":"/Users/andrewsmith/Computer Science/School/CompSci326/326Project/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/andrewsmith/Computer Science/School/CompSci326/326Project/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/andrewsmith/Computer Science/School/CompSci326/326Project/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/andrewsmith/Computer Science/School/CompSci326/326Project/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuZnVuY3Rpb24ubmFtZSI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC50by1zdHJpbmciOwppbXBvcnQgInJlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZSI7Ci8vCi8vCi8vCi8vCi8vCi8vCi8vCgovKiBlc2xpbnQtZGlzYWJsZSBuby1jb25zb2xlICovCmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAnRW5yb2xsbWVudCcKfTsgLy8gUHJlZmVyIGNhbWVyYSByZXNvbHV0aW9uIG5lYXJlc3QgdG8gMTI4MHg3MjAuCgp2YXIgdmlkZW87CnZhciBjb25zdHJhaW50cyA9IHsKICBhdWRpbzogZmFsc2UsCiAgdmlkZW86IHsKICAgIHdpZHRoOiAxMjgwLAogICAgaGVpZ2h0OiA3MjAKICB9Cn07Cm5hdmlnYXRvci5tZWRpYURldmljZXMuZ2V0VXNlck1lZGlhKGNvbnN0cmFpbnRzKS50aGVuKGZ1bmN0aW9uIChtZWRpYVN0cmVhbSkgewogIHZpZGVvID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcigndmlkZW8nKTsKICB2aWRlby5zcmNPYmplY3QgPSBtZWRpYVN0cmVhbTsKCiAgdmlkZW8ub25sb2FkZWRtZXRhZGF0YSA9IGZ1bmN0aW9uICgpIHsKICAgIHZpZGVvLnBsYXkoKTsKICB9Owp9KS5jYXRjaChmdW5jdGlvbiAoZXJyKSB7CiAgY29uc29sZS5sb2coZXJyLm5hbWUgKyAiOiAiICsgZXJyLm1lc3NhZ2UpOwp9KTsgLy8gYWx3YXlzIGNoZWNrIGZvciBlcnJvcnMgYXQgdGhlIGVuZC4KLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0KLy8gVEFLRSBBIFNOQVBTSE9UIENPREUKLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0KLy8gaW1wbGVtZW50cyBub2RlanMgd3JhcHBlcnMgZm9yIEhUTUxDYW52YXNFbGVtZW50LCBIVE1MSW1hZ2VFbGVtZW50LCBJbWFnZURhdGEKCmltcG9ydCAqIGFzIGNhbnZhcyBmcm9tICdjYW52YXMnOwppbXBvcnQgKiBhcyBmYWNlYXBpIGZyb20gJ2ZhY2UtYXBpLmpzJzsgLy8gLy8gcGF0Y2ggbm9kZWpzIGVudmlyb25tZW50LCB3ZSBuZWVkIHRvIHByb3ZpZGUgYW4gaW1wbGVtZW50YXRpb24gb2YKLy8gLy8gSFRNTENhbnZhc0VsZW1lbnQgYW5kIEhUTUxJbWFnZUVsZW1lbnQsIGFkZGl0aW9uYWxseSBhbiBpbXBsZW1lbnRhdGlvbgovLyAvLyBvZiBJbWFnZURhdGEgaXMgcmVxdWlyZWQsIGluIGNhc2UgeW91IHdhbnQgdG8gdXNlIHRoZSBNVENOTgoKdmFyIGZyYW1lLCBjdHg7CnZhciBDYW52YXMgPSBjYW52YXMuQ2FudmFzLAogICAgSW1hZ2UgPSBjYW52YXMuSW1hZ2UsCiAgICBJbWFnZURhdGEgPSBjYW52YXMuSW1hZ2VEYXRhOwp2YXIgTU9ERUxfVVJMID0gJy4vYXNzZXRzL21vZGVscyc7CmZhY2VhcGkuZW52Lm1vbmtleVBhdGNoKHsKICBDYW52YXM6IENhbnZhcywKICBJbWFnZTogSW1hZ2UsCiAgSW1hZ2VEYXRhOiBJbWFnZURhdGEKfSk7CndpbmRvdy5zZXRJbnRlcnZhbChmdW5jdGlvbiAoKSB7CiAgc25hcHNob3QoKTsKfSwgMTAwMCk7CgpmdW5jdGlvbiBzbmFwc2hvdCgpIHsKICB2YXIgcmVzdWx0c1JlZjsKICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLmFzeW5jKGZ1bmN0aW9uIHNuYXBzaG90JChfY29udGV4dCkgewogICAgd2hpbGUgKDEpIHsKICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgIGNhc2UgMDoKICAgICAgICAgIGZyYW1lID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImZyYW1lIik7CiAgICAgICAgICBjdHggPSBmcmFtZS5nZXRDb250ZXh0KCcyZCcpOyAvLyBEcmF3cyBjdXJyZW50IGltYWdlIGZyb20gdGhlIHZpZGVvIGVsZW1lbnQgaW50byB0aGUgY2FudmFzCgogICAgICAgICAgY3R4LmRyYXdJbWFnZSh2aWRlbywgMCwgMCwgZnJhbWUud2lkdGgsIGZyYW1lLmhlaWdodCk7CiAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNTsKICAgICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUuYXdyYXAoZmFjZURldGVjdGlvbk5ldC5sb2FkRnJvbURpc2soJy4uLy4uL3dlaWdodHMnKSk7CgogICAgICAgIGNhc2UgNToKICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA3OwogICAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS5hd3JhcChmYWNlYXBpLm5ldHMuZmFjZUxhbmRtYXJrNjhOZXQubG9hZEZyb21EaXNrKCcuLi8uLi93ZWlnaHRzJykpOwoKICAgICAgICBjYXNlIDc6CiAgICAgICAgICBfY29udGV4dC5uZXh0ID0gOTsKICAgICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUuYXdyYXAoZmFjZWFwaS5uZXRzLmZhY2VSZWNvZ25pdGlvbk5ldC5sb2FkRnJvbURpc2soJy4uLy4uL3dlaWdodHMnKSk7CgogICAgICAgIGNhc2UgOToKICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAxMTsKICAgICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUuYXdyYXAoZmFjZWFwaS5kZXRlY3RBbGxGYWNlcyhmcmFtZSwgZmFjZURldGVjdGlvbk9wdGlvbnMpLndpdGhGYWNlTGFuZG1hcmtzKCkud2l0aEZhY2VEZXNjcmlwdG9ycygpKTsKCiAgICAgICAgY2FzZSAxMToKICAgICAgICAgIHJlc3VsdHNSZWYgPSBfY29udGV4dC5zZW50OwoKICAgICAgICBjYXNlIDEyOgogICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICB9CiAgICB9CiAgfSk7Cn0="},{"version":3,"sources":["Enrollment.vue"],"names":[],"mappings":";;;;;;;;;;;AAQA;AACA,eAAA;AACA,EAAA,IAAA,EAAA;AADA,CAAA,C,CAGA;;AACA,IAAA,KAAA;AACA,IAAA,WAAA,GAAA;AAAA,EAAA,KAAA,EAAA,KAAA;AAAA,EAAA,KAAA,EAAA;AAAA,IAAA,KAAA,EAAA,IAAA;AAAA,IAAA,MAAA,EAAA;AAAA;AAAA,CAAA;AAGA,SAAA,CAAA,YAAA,CAAA,YAAA,CAAA,WAAA,EACA,IADA,CACA,UAAA,WAAA,EAAA;AACA,EAAA,KAAA,GAAA,QAAA,CAAA,aAAA,CAAA,OAAA,CAAA;AACA,EAAA,KAAA,CAAA,SAAA,GAAA,WAAA;;AACA,EAAA,KAAA,CAAA,gBAAA,GAAA,YAAA;AACA,IAAA,KAAA,CAAA,IAAA;AACA,GAFA;AAGA,CAPA,EAQA,KARA,CAQA,UAAA,GAAA,EAAA;AAAA,EAAA,OAAA,CAAA,GAAA,CAAA,GAAA,CAAA,IAAA,GAAA,IAAA,GAAA,GAAA,CAAA,OAAA;AAAA,CARA,E,CAQA;AAEA;AACA;AACA;AAEA;;AAEA,OAAA,KAAA,MAAA,MAAA,QAAA;AAEA,OAAA,KAAA,OAAA,MAAA,aAAA,C,CACA;AACA;AACA;;AAEA,IAAA,KAAA,EAAA,GAAA;IACA,M,GAAA,M,CAAA,M;IAAA,K,GAAA,M,CAAA,K;IAAA,S,GAAA,M,CAAA,S;AACA,IAAA,SAAA,GAAA,iBAAA;AAEA,OAAA,CAAA,GAAA,CAAA,WAAA,CAAA;AAAA,EAAA,MAAA,EAAA,MAAA;AAAA,EAAA,KAAA,EAAA,KAAA;AAAA,EAAA,SAAA,EAAA;AAAA,CAAA;AAGA,MAAA,CAAA,WAAA,CAAA,YAAA;AACA,EAAA,QAAA;AACA,CAFA,EAEA,IAFA;;AAIA,SAAA,QAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,UAAA,KAAA,GAAA,QAAA,CAAA,cAAA,CAAA,OAAA,CAAA;AACA,UAAA,GAAA,GAAA,KAAA,CAAA,UAAA,CAAA,IAAA,CAAA,CAFA,CAGA;;AACA,UAAA,GAAA,CAAA,SAAA,CAAA,KAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,CAAA,KAAA,EAAA,KAAA,CAAA,MAAA;AAJA;AAAA,0CAMA,gBAAA,CAAA,YAAA,CAAA,eAAA,CANA;;AAAA;AAAA;AAAA,0CAOA,OAAA,CAAA,IAAA,CAAA,iBAAA,CAAA,YAAA,CAAA,eAAA,CAPA;;AAAA;AAAA;AAAA,0CAQA,OAAA,CAAA,IAAA,CAAA,kBAAA,CAAA,YAAA,CAAA,eAAA,CARA;;AAAA;AAAA;AAAA,0CAUA,OAAA,CAAA,cAAA,CAAA,KAAA,EAAA,oBAAA,EACA,iBADA,GAEA,mBAFA,EAVA;;AAAA;AAUA,UAAA,UAVA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["<template>\n    <div>\n        <video muted id=\"video\" width=\"100%\" height=\"100%\" autoplay></video>\n        <canvas id=\"frame\" width=\"640\" height=\"480\"></canvas>\n    </div>\n</template>\n\n<script>\n    /* eslint-disable no-console */\n    export default {\n        name: 'Enrollment'\n    }\n    // Prefer camera resolution nearest to 1280x720.\n    var video;\n    var constraints = { audio: false, video: { width: 1280, height: 720 } };\n\n\n    navigator.mediaDevices.getUserMedia(constraints)\n        .then(function(mediaStream) {\n            video = document.querySelector('video');\n            video.srcObject = mediaStream;\n            video.onloadedmetadata = function() {\n                video.play();\n            };\n        })\n        .catch(function(err) { console.log(err.name + \": \" + err.message); }); // always check for errors at the end.\n\n    //---------------------\n    // TAKE A SNAPSHOT CODE\n    //---------------------\n\n    // implements nodejs wrappers for HTMLCanvasElement, HTMLImageElement, ImageData\n\n    import * as canvas from 'canvas';\n\n    import * as faceapi from 'face-api.js';\n    // // patch nodejs environment, we need to provide an implementation of\n    // // HTMLCanvasElement and HTMLImageElement, additionally an implementation\n    // // of ImageData is required, in case you want to use the MTCNN\n\n    var frame, ctx;\n    const { Canvas, Image, ImageData } = canvas;\n    const MODEL_URL = './assets/models';\n\n    faceapi.env.monkeyPatch({ Canvas, Image, ImageData });\n\n\n    window.setInterval(function(){\n       snapshot();\n    }, 1000);\n\n    async function snapshot() {\n        frame = document.getElementById(\"frame\");\n        ctx = frame.getContext('2d');\n        // Draws current image from the video element into the canvas\n        ctx.drawImage(video, 0,0, frame.width, frame.height);\n\n        await faceDetectionNet.loadFromDisk('../../weights');\n        await faceapi.nets.faceLandmark68Net.loadFromDisk('../../weights');\n        await faceapi.nets.faceRecognitionNet.loadFromDisk('../../weights');\n\n        const resultsRef = await faceapi.detectAllFaces(frame, faceDetectionOptions)\n            .withFaceLandmarks()\n            .withFaceDescriptors()\n\n    }\n</script>\n\n<style scoped>\n\n</style>\n"],"sourceRoot":"src/components"}]}